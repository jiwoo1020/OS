 !! !cp 

 #1. 캐럿을 이용한 히스토리 확장 
 md5sum *.jp | ... (jpg를 jp로 잘못 씀 )
 ^jp^jpg
 <패턴>:s/from_cmd/to_cmd (??)
 !!:s/jp/jpg
 !md5sum/jp/jpg

 <총정리> 
 ##1. programs

 - <프로그램> <옵션> <인수> 
 -옵션 : -(ch)
 -디렉토리 ,... 
 -ex) ls -l  /etc/passwd

 1) date 단순한 명령어 
 2) who 지금 사용자 이름이 나와야함 (터미널에서 하면 나옴)
 3) echo (터미널에 프린트, 변수가 오면 치환해서 나타내준다 )
  -공백 무시 
 4) ls 
 - 파일디렉토리를 조회 
 - "-l": 더 자세히 
 - "-a" : 숨겨져잇는거까지 자세히 
 - 멀티컬럼으로 stdout
 - 인수가 디렉토리
 - 인수로 파일명을 쓰면 이름 그대로 반환 
5) cat 
 - concatenate
 - 인수로 파일명 
 - 파일 이어붙이기 가능 (cat grades letters) 컨텐츠 확장할때 사용 

 6) wc
  - 라인, 단어, 글자 수 세기 
  -옵션으로 "-ㅣ, -w, -c"
  wc -l 뒤 인수가 없으면 
  표준입력 가능 ㅈ빠져ㅏ나올떄 컨트롤 디 

  7) cp (copy)
   - copy fromA  toB (B가 없다면 생김 )
   - 다른 디렉토리일 경우 
    -상대경로로 쓰는게 편함 
    -같은 파일명일 경우 이름 안 써도 됨 
     ex) cp b ./notes
  -여러파일 복사 가능 
  ex) cp 1 2 3 4 5 6
   1-5 from 6 to 
  Q. OSS에서 notes/b를 복사해서 가져오는 코드를 작성하기 
  rummer(pwd) 
  ㄴ OSS
   ㄴnotes
     ㄴb 
A. cp ./OSS/notes/b . (cp가 ls를 포함하고 잇음 , 현재 디렉토리는 .으로 표현 )

8) mv
 -mv fromA toB (마지막것만 B)
 -파일명 변경할때 
  mv a aa (a 사라지고 aa)
 - 디렉터리 A -> B 로 바꾼다 햇을떄 : sample -> notes 
 mv sample notes

 ** 기존에 존재하는 파일명일 경우엔 덮어쓴다 
9) rm (remove)
 - 인수로 파일명이나 디렉토리 
 -디렉토리가 인수로 올땐 비어있어야함 
 - "-r"
 -여러개 지울수있다
 ex) rm *.txt
 -지웠던 파일 다시 복원 기능ㅇ은 없으니 잘 확인하고 지워야함 
 10) rmdir 

 ## 디렉토리 관련 명령 
 1) pwd(print working directory)
 2) cd (change directory)
 -빠져나올떄 cd .. 
 -cd만 치면 홈으로 감 

 Q. notes 에서 runner로 한번에 가는 방법 
 A. cd ../.. 

 3)mkdir (make directory)
 4) rmdir
 5) ln
  -link files
  -a와 b를 항상 동기화시키고싶을때 
  -다른 디렉토리에 동일한 파일을 위치시키고 싶을때
  -ls -l 로 확인가능함 
  -파일 하나를 삭제해도 다른 파일이 삭제되진 않는다 

  ##패턴매칭 
1.asterisk (*)
   -0개 이상
   cat * ( 현재 디렉터리에 잇는 모든 파일 )
   chapter* #챕터로 시작해서 뒤에 머가 붙는 모든 파일 

Q. t가 들어있는 모든 파일 
A.  *t*

2. ?
 -한개파일 
 echo ? #글자 1개로 된 모든 파일 

3. []
 - 특정 글 자1개 매칭되는것 전부 
 Q. o를 제외한 모든 소문자
 A. [a-np-z]
 A. [!o]

 4. escape letter
  - 공백, $, ... 
  - \
   cat file_a file_b
   cat hello world
   cat hello\world
   아니면 "" ''

  -echo 예외 
  Q. 'who are you?' 라는 디렉토리 생성하고 목록 조회하는 코드 

  A. mkdir 'who are you?'
     ls 'who are you?'

     mkdir "who are you?"
     ls "who are you?"

     mkdir who\ are\ you?
     ls who\ are\ you\?

  ##리다이렉션
  -입력 <
  -출력 >
  -에러 2
  -"" > cp_pattern1

  ##파이프라인 
  - |
  - 표준입출력을 이용하는 모든 프로그램은 파이프를 사용할 수 있다.
  - A | B | ... 
  -"필터" : 파이프라인을 사용할 수 있는 , 입출력값을 고칠 수 있는것 (그랩 컷 )

## 
- ; (여러 명령 한줄에 쓸때 )
(date; pwd)
- 오래 걸리는 명령 백그라운드로 보내기  : <명령> & 
- 다른 프로그램 동시에 수행 가능
- 백그라운드로 돌린게 표준입력으로 돌려야하면 홀드가 됨 

-ps
 - 프로세스 정보 나타냄 
 -PID : id 
 옵션 -f 더 자세히 
 -TTY : terminal information
 -time : 구동 시간 
 -cmd-프러ㅗ세스 이름 

 ##명령 2
 1. cut
  -cut<> 파일명 
  - -f,c,d

Q. 10번째 글자부터 끝까지 
A. cut -c10- 

-d 뒤에 구분자 없으면 탭이 디폴트

2. paste
-cut 과 반대됨 
-컬럼별로 데이터 붙임 
-디폴틑는 탭 
-d<구분자> : 구분자 지정
- -s : 같은 파일을 수정할 경우 
' ' -> \t
paste -s -d' ' file

3. grep
 -grep <pattern> <directory>
 -패턴에 매칭되는 문자열을 가진 라인 출력 
 -매칭 없으면 아무것도 출력되지 않는다 
 grep Linux * (파일내부 텍스트)
 ... | grep Linux * (출력에서 받은 입력값)
 Q. 전체 파일에서 *가진 것 찾기 
 A. grep \* .
    grep \* * (어떻게 바꿔야하는지 )
    --> 패턴은 ''을 사용하는게 좋다 
    ^[A-Z]*
    *.txt$

   -i : 대소문자 구분 안 함 
   -w : 정확한 매칭만 
    ex) the -> there (x)
  -v : 포함안되는거 
  -l : 해당 매칭이 잇는 파일명
  -n : 라인 넘버 강ㅌ이 출략 
  그랩 중ㅇ요함 ! 

  Q. 해당 매칭이 잇는 파일 개수
  grep -l 'A' * | wc -l

  4. sort 정ㄹ렬 
   - 라인별로 정렬 , 오름차순이 디폴트 
   -r : 내림차순 
   -n : 숫자기준 
    -셸은 모든 인수를 문자열로 인식한다

- 특수문자, 다른 언어 중에 특수기호 사용하는 문자 정렬 순서 주의하세용 
- ' ' 은 32로 치환 
-u 옵션 : sort + uniq 한방에 해줌 
-o option : 
 - sort file1 > file1 (X)
 -정렬된 결과물 같은 파일에 저장 

 5. uniq
  -중복 삭제 
  -인접한 것만 고려한다.
  - 옵션 d : 결과 중 중복된 것 삭제
  -옵션 c : 중복됟ㄴ 횟수 카운트

6. tr
 - tr from_char to_char
 ex)tr e x <input
 stdin 만 가능함 하 싯팔 먼 소리야 
 Q. animals.txt에서 e x 바꿔 
 A. tr e x < animals.txt

소문자를 대문자로 
tr '[a-z]' '[A-Z]' <animals.txt 

d옵션 : 삭제 
tr -d the 더를 삭제 






