정규표현식 , grep, ed, sed *중요*

#1. 정규표현식 
- 정규표현식과 와일드카드 헷갈리지않기 
 *? ... chapter*.txt 2장 (공부할때 비교해서 표 짜기 )
- 패턴 매칭할 때 사용한다. 
1. line 기준 
2. 가장 긴 문자열 매칭 


 ##1. 마침표 (.)
  - any signal character
  -r, #ro, rk, rc ....
  -.x # xxx, oxo
  - [a-zA-Z]
  ex) echo hello world | grep '.$'

##2. ^ 캐럿 
 - 라인의 처음 
 -[^] #not
 ex)[^a-z] #소문자가 아닌 
 ex) 
##3. $ (dollar)
 - 라인의 끝
 - ^ $ #빈 줄 

 ##4. [리스트]
  -[a-z]
  -[a-np-z] # o 제외 
  -[a-n][p-z] 두글자
  -grep '[Tt]he' animals.txt 
  -grep -i 'the' animals.txt # 대문자 소문자 상관 x


##5. * 
 - 0개 이상 
 - x* #x가 0번이상 나타날수있다 
 - 앞글자 한정
 ex) x 시작하는 단어 
 A. grep xx* 머래니 
 x* 은 틀림 


##6. \*
- 1개 이상 
x\* 

##7. \?
 - 0개 아니면 1개 

##8. \{i,j\}
- j: 
- i,
- ,j
x\{10\} #10번
x\{1,10\} #1번에서 10번까지 
x\{10,\}

##9.\(regrex\)
 - back refrencing이 가능하다
 #동일한 알파벳 2개로 시작하는 라인 (aa... ll... )
##10. regrex \| regrex2
-regrex1 or regrex2
abba
- '\(a\)\(b\)\2\1'

Q. 
1. a-f까지 매칭 
A.grep [a-f]
2.b나 ab 매칭 
'b\|ab'
3. 2번 + aaaaaab 매칭
.*(b|ab).*a{6}b
4. 모든 글자 매칭 
grep 
5. #으로 시작하는 문장 매칭 
A. grep '^#'
6. \로 끝나는 문장 매칭 
A. grep \\$
7. 대문자로 시작하지않는 문자매칭 
grep [^A-Z]
8. 빈줄이 아닌 모든 줄 매칭 
grep -v '^ $'
9. cookie나 cake이 포함된 줄 매칭 
grep 'cookie\|cake'
10. w. 매칭 
A. grep 'w\.'

# answer.
1; grep [a-f]
2. grep 'b \| ab'
3. grep 'b \| ab \| a*b'
4. grep '^'
5. grep '^.' | grep '#'
6. grep '.$' | grep '\'
7. grep [^A-Z]
8. grep -v '^ $'
9 grep 'cookie \| cake'
10 grep 'w.'

##1.확장 
[a-zA-z0-9_] \w
\W (not) 소문자랑 대문자 반대 
\b: word boundary (앞뒤) h. o
\b<regrex>\b
 \<앞\> 뒤
\B ell
\ㅁ\s whitespace (space,tab)
\S

##2.ed (editor) 명령어
-텍스트 에디ㅓㅌ 
-line-oriented text editor
-인터렉티브형 
-format: ed filename (이 파일ㄹ 드렁감)
-치환 (a -> b)하라
[address][명령][정규식][flags]
1,$s/a/b/
1부터 끝까지 the를 xxx로 바꿔
1,$s\the\xxx
1,$p (print해야함) 

1,$s/[a-z]//g #global

Q. 모든 모음을 지우기 
1,$/s[aeiou]//
ctrl+d,c

#3. sed
-stream editor
-표준입출력 사용가능, 파이프라인 사용 가능 
-인터렉티브하진않음 
-단위는 라인 
-
ㅂQ. animals.txt 에서 python을 대문자로 바꾸고 저장하기 
A. tr python PYTHON > animals.txt 

sed -i 's/python/PYTHON/g' animals.txt

##2) sed 실행하기 
 - format : sed <script> <input_file> > <out_file>
 hello -> world file
 A. sed -i 's/hello/world/g' file 
 = sed -i 's/hello/world/g'< file
 = cat file | sed 's/hello/world/g'

 ### -i 옵션 
 -동일한 파일에 저장한다.(in-place)
 -임시파일을 따로 저장하고 싶을때 -iE 
 그러면 파일이름에 fileE 일케 
 ### -n 옵션 
 =p와 같이 사용하여 출력범위를 지정한다
 sed -n '2p' file (두번쨰ㅜ줄만 프린트)

 5-10번째 줄까지 출력학 
 sed -n '5,10p' file

 python이 있는 라인만 출력하자 
 A. sed -n '/python/p' file
 -; 으로 여러정규식 연결가능 
 sed -m '1p; $p' file
 sed -n '1p ; $p' fileA fileB fileC
 cat fileA fileB fileC | sed -n '1p; $p'

 ###-e, -f
 e: expression
 f: file
 sed -e '1p; $;' -f file
 옵션이 없으면 1번째가 정규표현식 두번쨰가 입력파일
 format : <option> <script> <input_file> #full format

##3) script
-<address><cmd><option>
'2p'
-address: 2
cmd: p

'3d' = 세번째라인을 지워라 

Q. input_file에서 python으로 시작하는 라인 삭제하고, hello -> world로 변경한뒤 out_file에 저장하라 
A. sed '/^python/d; s/hello/world/g' input_file > out_file

sed -e '/^python\d' -e 's/hello/world/g'

Q. 풀어보기 
1) 3번째줄 삭제 
2) python, Python 포함 줄 삭제 
3 처음 10개 줄 중 2번 실행 
4)각 줄에 첫 3글자 삭제 

-p,d,s,q (q는 실행하고 종료 ) s가 중요 

###cmd 's'
- format: s/regrex/replacement/flag
flag에서 가장마니 쓰이는거 g(global)
falg p : 해당부분 프린트 
i : 대소문자 구분없음 

Q.image.jpg.1, image.jpg2,image.jpg3
>> image1.jpg, image2.jpg, image3.jpg

A. 정답알ㄹ려줘어어엉엉 알려줭 알려줭 알려줭 
sed s/\(\)//g

###address
-범위 지정 
'2p'
sed '160s/a/b/'
sed '/apple/s///' #apple이 있는 ㅜ분에서 뭔가를 하는 

sed '/apple/!s///' : not
sed '160,200s/a/b/' (range)
sed '100,2s/a/b/'(160번째만 수행하고 끝 
)
1,$~2 #step == 2 

#스크립트 작성 
-파일에 커맨드라인 입력 (vi file)
-모드변경한다 
-실행 
name

#1.
echo 1번 

-주석 #
라인 단위 